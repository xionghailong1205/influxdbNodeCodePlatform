import { DropBox } from './DropBox'
import classes from './Content.module.css'
import { DatePickerDemo } from './DatePicker/DatePicker'
import { CodeBlock } from './CodeBlock'
import { Button } from '@/components/ui/button'
import { API } from '@/api'
import { useCodeGenerator } from '@/state/useCodeGenerator'
import { format } from "date-fns"
import { useRef } from 'react'
import InfluxDBResultTable from './InfluxDBResultTable/InfluxDBResultTable'

const generateQueryFormatDate = (date: Date | undefined) => {
    if (date) {
        const formatedDate = format(date, "yyyy-MM-dd'T'HH:mm:ss'Z'");

        return formatedDate
    } else {
        return ""
    }
}

const Content = () => {
    const selectedBucket = useCodeGenerator(state => state.selectedBucket)
    const selectedDateRange = useCodeGenerator(state => state.selectedDateRange)
    const selectedMeasurement = useCodeGenerator(state => state.selectedMeasurement)
    const selectedField = useCodeGenerator(state => state.selectedField)
    const selectedTags = useCodeGenerator(state => state.selectedTags)
    const fluxQueryCode = useCodeGenerator(state => state.fluxQueryCode)

    let autoGeneratedFluxCode = 'select bucket auto generate flux query code'

    if (selectedBucket) {
        const bucketSelectCode = `from(bucket: "${selectedBucket}")`

        let dateRangeFilterCode = `|> range(start: -12h)`
        if (selectedDateRange) {
            const startDate = generateQueryFormatDate(selectedDateRange.from!)
            const endDate = generateQueryFormatDate(selectedDateRange.to!)
            dateRangeFilterCode = `|> range(start: ${startDate}, stop: ${endDate})`
        }

        let measurementFilterCode = ''
        if (selectedMeasurement) {
            measurementFilterCode = `|> filter(fn: (r) => r._measurement == "${selectedMeasurement}")`
        }

        let fieldFilterCode = undefined
        if (selectedField) {
            fieldFilterCode = `|> filter(fn: (r) => r._field == "${selectedField}")
    `
        }

        let tagFilterCode = undefined
        if (selectedTags.length > 0) {
            const fieldQueryList = selectedTags.map(tagInfo => {
                const tagKey = Object.keys(tagInfo)[0]
                const tagValue = tagInfo[tagKey]

                return (`r.${tagKey} == "${tagValue}"`)
            })

            tagFilterCode = `|> filter(fn: (r) => ${fieldQueryList.join(' and ')})
    `
        }

        autoGeneratedFluxCode = `
${bucketSelectCode}
    ${dateRangeFilterCode}
    ${measurementFilterCode}
    `

        if (fieldFilterCode) {
            autoGeneratedFluxCode += fieldFilterCode
        }

        if (tagFilterCode) {
            autoGeneratedFluxCode += tagFilterCode
        }
    }

    const iframeRef = useRef<HTMLIFrameElement>(null);

    return (
        <div
            className={classes.container}
        >
            <div
                className={classes.queryBox}
            >
                <div
                    className={classes.leftPanel}
                >
                    <DropBox />
                </div>
                <div
                    className={classes.rightPanel}
                >
                    <div
                        style={{
                            display: "flex",
                            alignItems: "center",
                            justifyContent: "space-between"
                        }}
                    >
                        <DatePickerDemo />
                        <Button
                            onClick={() => {
                                API.doQuery({
                                    newFluxCode: autoGeneratedFluxCode
                                }).then(result => {
                                    console.log(result)
                                    if (iframeRef.current) {
                                        iframeRef.current.src = iframeRef.current?.src
                                    }
                                    const setFluxQueryCode = useCodeGenerator.getState().setFluxQueryCode
                                    setFluxQueryCode(autoGeneratedFluxCode)
                                })
                            }}
                        >
                            Do Query
                        </Button>
                    </div>
                    <CodeBlock className={`bg-[#0f243f] ${classes.codeBox}`} autoGeneratedFluxCode={autoGeneratedFluxCode} />
                </div>
            </div>
            <div
                className={`${classes.influxdbResultBox}`}
            >
                <InfluxDBResultTable />
            </div>
            {
                fluxQueryCode ? (
                    <div
                        className={classes.grafanaResultBox}
                    >
                        <iframe src="http://localhost:3000/d-solo/ae1szt9dkrchsc/influxdb-visualization?from=1727742423000&to=1727999324000&timezone=browser&orgId=1&theme=dark&panelId=1&__feature.dashboardSceneSolo" frameBorder="0"
                            className={classes.frameBox}
                            ref={iframeRef}
                        ></iframe>
                    </div>
                ) : (
                    ""
                )
            }
        </div>
    )
}

export default Content